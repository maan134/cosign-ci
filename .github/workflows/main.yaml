# This is a GitHub Actions workflow file that defines a CI/CD pipeline.
# It's triggered on pushes to the main branch and is designed to build,
# sign, and push a container image to the GitHub Container Registry (ghcr.io).
name: 'Build and Sign Container Image'

on:
  push:
    branches:
      # This workflow will only run on pushes to the 'main' branch. 
      - 'main'

# Environment variables are defined here to be used throughout the workflow.
env:
  # The container registry to push the image to.
  REGISTRY: ghcr.io
  # The name of the image, using the GitHub repository name. name
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-sign-push:
    name: 'Build, Sign, and Push Image'
    # The 'permissions' block is crucial for security. It grants the job specific permissions that it needs to run.
    permissions:
      # 'contents: read' is required to check out the repository code.
      contents: read
      # 'packages: write' is required to push the container image to ghcr.io.
      packages: write
      # 'id-token: write' is essential for keyless signing with Cosign.
      # It allows the workflow to obtain an OIDC token from GitHub, which Cosign uses to prove its identity to the Fulcio certificate authority.
      id-token: write # This is required for signing the image.
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        # The actions/checkout action checks out the repository's code so the workflow can access it.
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        # The docker/setup-buildx-action sets up Docker Buildx, which is a
        # Docker CLI plugin for extended build capabilities with BuildKit.
        uses: docker/setup-buildx-action@v3

      - name: 'Log in to GitHub Container Registry'
        # The docker/login-action logs into a Docker registry. In this case, it's logging into ghcr.io using a short-lived GITHUB_TOKEN.
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN}}

      - name: 'Extract Docker metadata'
        id: meta
        # The docker/metadata-action automatically extracts labels and tags for the Docker image from Git metadata. 
        # This is useful for creating meaningful tags like 'latest' for the main branch or tags based on the Git SHA.
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: 'Build and push Docker image'
        id: push
        # The docker/build-push-action builds and pushes the Docker image.
        # It uses the tags and labels generated by the metadata-action.
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 'Install Cosign'
        # The sigstore/cosign-installer action installs Cosign, the tool we'll use to sign our container image.
        uses: sigstore/cosign-installer@v3

      - name: 'Sign the container image'
        # This step uses Cosign to sign the container image we just pushed.
        # It uses keyless signing, which means we don't need to manage any
        # cryptographic keys. Instead, it uses the OIDC token from GitHub
        # to authenticate and get a signing certificate from the Fulcio CA.
        # We are signing the immutable image digest (e.g., sha256:...)
        # rather than a mutable tag (e.g., :latest) for better security.
        # The '--yes' flag is for non-interactive confirmation.
        run: cosign sign --yes "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.push.outputs.digest }}" \
              --certificate-identity-regexp "https://github.com/${{ github.repository_owner }}/.*" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com"